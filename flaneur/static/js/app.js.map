{"version":3,"file":"flaneur/static/js/app.js","sources":["app/app.js","app/filters.js","app/paging/paging.js","app/widgets/cooper-current-projects/cooper-current-projects.js","app/widgets/flaneur-clock/flaneur-clock.js","app/widgets/flaneur-counter/flaneur-counter.js","app/widgets/flaneur-link/flaneur-link.js","app/widgets/flaneur-list/flaneur-list.js","app/widgets/flaneur-tweets/flaneur-tweets.js","app/widgets/flaneur-twitter-users/flaneur-twitter-users.js"],"names":[],"mappingsxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCntQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCrBA;CCAA;CCAA;CCAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["(function ()\n{\n\nvar app = angular.module('flaneur', [\n    'ngSanitize',\n    'ngTouch',\n    'templates'\n])\n\napp.factory('Hub', function ($timeout)\n{\n    var started = false\n    var Hub = function () {}\n    Hub.prototype = \n    {\n        subscribers: {},\n        \n        subscribe: function (channel, callback)\n        {\n            if (!this.subscribers[channel])\n            {\n                this.subscribers[channel] = []\n            }\n            \n            this.subscribers[channel].push(callback)\n        },\n        \n        publish: function (channel, data)\n        {\n            if (this.subscribers[channel])\n            {\n                this.subscribers[channel].forEach(function (callback)\n                {\n                    callback(data)\n                })\n            }\n        },\n        \n        bind: function (channel, scope)\n        {\n            this.subscribe(channel, function (data)\n            {\n                $timeout(function ()\n                {\n                    for (var n in data)\n                    {\n                        scope[n] = data[n]\n                    }\n                })\n            })\n            \n            if (!started && INITIAL_CHANNEL_DATA && INITIAL_CHANNEL_DATA[channel])\n            {\n                hub.publish(channel, INITIAL_CHANNEL_DATA[channel])\n            }\n        }\n    }\n    \n    var hub = new Hub()\n    var eventSource = new EventSource('/subscribe')\n    \n    eventSource.onmessage = function (msg)\n    {\n        started = true\n        var data = JSON.parse(msg.data)\n        \n        if (data && data.channel && data.data)\n        {\n            hub.publish(data.channel, data.data)\n        }\n    }\n    \n    return hub\n})\n\nwindow.Flaneur = function (name, create_fn)\n{\n    var getDashedName = function (name)\n    {\n        if (-1 < name.indexOf('-'))\n        {\n            return name\n        }\n        else\n        {\n            return name\n                    .replace(/([a-z])([A-Z])/, '$1 $2')\n                    .split(' ')\n                    .map(function (n) { return n.toLowerCase() })\n                    .join('-')\n        }\n    }\n    \n    var getCamelCaseName = function (name)\n    {\n        if (name.indexOf('-') < 0)\n        {\n            return name\n        }\n        else\n        {\n            return name\n                    .split('-')\n                    .map(function (n, i)\n                    {\n                        if (i == 0)\n                        {\n                            return n\n                        }\n                        else\n                        {\n                            return n.charAt(0).toUpperCase() + n.substr(1)\n                        }\n                    })\n                    .join('')\n        }\n    }\n    \n    var dashedName = getDashedName(name),\n        camelName = getCamelCaseName(name)\n    \n    app.directive(camelName, function ($injector, Hub)\n    {\n        var options = create_fn ? $injector.invoke(create_fn) : {}\n        \n        return {\n            restrict: 'E',\n            scope: {  channel: '@'},\n            templateUrl: options.templateUrl ? options.templateUrl : 'app/widgets/' + dashedName + '/' + dashedName + '.html',\n            link: function ($scope, $element, $attrs, $transclude)\n            {\n                if ($scope.channel)\n                {\n                    Hub.bind($scope.channel, $scope)\n                }\n                \n                if (options.link)\n                {\n                    options.link($scope, $element, $attrs, $transclude)\n                }\n            }\n        }\n    })\n}\n\napp.run(function ()\n{\n    qbert('.widgets', {\n        target_pixel_size: 218\n    })\n})\n\n})()","angular.module('flaneur')\n\n.filter('zeroPadding', function ()\n{\n    return function (value, size)\n    {\n        var valueStr = (value + '')\n        \n        if (valueStr.length < size)\n        {\n            var diff = size - valueStr.length\n            for (var i=0; i<diff; i++)\n            {\n                valueStr = '0' + valueStr\n            }\n        }\n        \n        return valueStr\n    }\n})","angular.module('flaneur')\n\n.directive('flaneurPagesControl', function ($timeout)\n{\n    return {\n        restrict: 'E',\n        templateUrl: 'app/paging/pages-control.html',\n        scope: {\n            items: '=',\n            perPage: '@',\n            page: '='\n        },\n        link: function ($scope, $element)\n        {\n            var updatePages = function ()\n            {\n                var numPages = $scope.items ? Math.ceil($scope.items.length / $scope.perPage) : 0,\n                    pages = []\n                \n                for (var i=0; i<numPages; i++)\n                {\n                    pages.push(i)\n                }\n                \n                $scope.pages = pages\n            }\n            \n            updatePages()\n            $scope.$watch('items', updatePages)\n            $scope.$watch('perPage', updatePages)\n            \n            $element.on('click', function ()\n            {\n                $timeout(function ()\n                {\n                    if ($scope.page == $scope.pages.length - 1)\n                    {\n                        $scope.page = 0\n                    }\n                    else\n                    {\n                        $scope.page += 1\n                    }\n                })\n            })\n        }\n    }\n})\n\n.directive('flaneurPages', function ($swipe, $timeout, $interval)\n{\n    return {\n        restrict: 'E',\n        scope: {\n            items: '=',\n            perPage: '@',\n            page: '=',\n            rotateEvery: '@'\n        },\n        transclude: true,\n        link: function ($scope, $element, $attrs, $controller, $transclude)\n        {\n            var groups = []\n            \n            $scope.$watchCollection('items', function (items)\n            {\n                if (!items)\n                {\n                    items = []\n                }\n                \n                if (groups.length > 0)\n                {\n                    for (var i=0; i<groups.length; i++)\n                    {\n                        var group = blocks[i]\n                        for (var j=0; j<group.children.length; j++)\n                        {\n                            group.children[j].$scope.$destroy()\n                        }\n                        group.element.remove()\n                    }\n                }\n                groups.length = 0\n                \n                var currentGroup = []\n                \n                for (var i=0; i<items.length; i++)\n                {\n                    if (currentGroup.length == $scope.perPage)\n                    {\n                        groups.push({\n                            items: currentGroup\n                        })\n                        currentGroup = [items[i]]\n                    }\n                    else\n                    {\n                        currentGroup.push(items[i])\n                    }\n                }\n                \n                if (currentGroup.length > 0)\n                {\n                    groups.push({\n                        items: currentGroup\n                    })\n                }\n                \n                for (var i=0; i<groups.length; i++)\n                {\n                    var childScope = $scope.$new(),\n                        group = groups[i]\n                    group.element = angular.element('<div></div>')\n                    group.children = []\n                    \n                    group.element.addClass('page')\n                    $element.append(group.element)\n                    childScope.items = group.items\n                    childScope.$itemOffset = i * $scope.perPage\n                    \n                    $transclude(childScope, function (clone)\n                    {\n                        group.element.append(clone)\n                        group.children.push(\n                        {\n                            element: clone,\n                            scope: childScope\n                        })\n                    })\n                }\n            })\n\n            $scope.$watch('page', function (page)\n            {\n                if (groups && groups[0])\n                {\n                    groups[0].element.animate({ marginLeft: - $element.width() * page }, 150)\n                }\n            })\n            \n            var rotateInterval = parseFloat($attrs.rotateEvery) * 1000,\n                rotatePromise = null,\n                shouldRotate = $attrs.rotateEvery && true\n                rotate = function ()\n                {\n                    if (shouldRotate)\n                    {\n                        rotatePromise = $interval(function ()\n                        {\n                            if ($scope.page == groups.length - 1)\n                            {\n                                $scope.page = 0\n                            }\n                            else\n                            {\n                                $scope.page += 1\n                            }\n                        }, rotateInterval)\n                    }\n                },\n                stopRotating = function ()\n                {\n                    $interval.cancel(rotatePromise)\n                }\n            rotate()\n            \n            var pagingController =\n            {\n                startPos: null,\n                offset: 0,\n                \n                setOffset: function (x)\n                {\n                    this.offset = x\n                    groups[0].element.css('margin-left',  (-1 * $scope.page * $element.width()) + x)\n                },\n                \n                snap: function ()\n                {\n                    var pageWidth = $element.width(),\n                        absOffset = Math.abs(this.offset)\n                    \n                    if (absOffset > pageWidth / 2)\n                    {\n                        this.updatePage()\n                    }\n                    else\n                    {\n                        this.snapToCurrent()\n                    }\n                },\n                \n                snapToCurrent: function ()\n                {\n                    groups[0].element.animate({ 'margin-left': -1 * $scope.page * $element.width() }, 150)\n                },\n                \n                updatePage: function ()\n                {\n                    if (this.offset < 0)\n                    {\n                        if ($scope.page < groups.length - 1)\n                        {\n                            $timeout(function ()\n                            {\n                                $scope.page += 1\n                            })\n                        }\n                        else\n                        {\n                            this.snapToCurrent()\n                        }\n                    }\n                    else\n                    {\n                        if ($scope.page > 0)\n                        {\n                            $timeout(function ()\n                            {\n                                $scope.page -= 1\n                            })\n                        }\n                        else\n                        {\n                            this.snapToCurrent()\n                        }\n                    }\n                },\n                \n                start: function (pos)\n                {\n                    stopRotating()\n                    this.startPos = pos\n                },\n                \n                cancel: function ()\n                {\n                    this.snap()\n                    rotate()\n                },\n                \n                move: function (pos)\n                {\n                    this.setOffset(pos.x - this.startPos.x)\n                },\n                \n                end: function ()\n                {\n                    if (this.offset == 0)\n                    {\n                        return\n                    }\n                    \n                    this.updatePage()\n                    rotate()\n                }\n            }\n            \n            $swipe.bind($element, pagingController)\n        }\n    }\n})","Flaneur('cooper-current-projects', function ()\n{\n    return {\n        link: function ($scope)\n        {\n            $scope.page = 0\n        }\n    }\n})","Flaneur('flaneur-clock', function ($interval)\n{\n    return {\n        link: function (scope)\n        {\n            scope.date = new Date()\n            \n            $interval(function ()\n            {\n                scope.date = new Date()\n            }, 0.7)\n        }\n    }\n})\n\nangular.module('flaneur').filter('flaneurClockTime', function ()\n{\n    return function (date)\n    {\n        return date.toLocaleTimeString() + ' ' + date.toLocaleDateString()\n    }\n})","Flaneur('flaneur-counter')","Flaneur('flaneur-link')","Flaneur('flaneur-list')","Flaneur('flaneur-tweets')\n\nangular.module('flaneur').filter('twitterDate', function ($filter)\n{\n    return function (value)\n    {\n        var date = new Date(Date.parse(value))\n        return $filter('date')(date, 'short')\n    }\n})","Flaneur('flaneur-twitter-users', function ()\n{\n    return {\n        link: function ($scope)\n        {\n            $scope.page = 0\n        }\n    }\n})"]}